# in urls.py
url(r'^list/$', views.list, name='list'),

# in views.py
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.db.models import Q

from .models import <modelName>

@csrf_exempt
@login_required
def list(request):
	if request.user.is_authenticated and request.user.is_staff:
		context = {}
		count = 0
		item = <modelNAme>.objects.all()
		count = len(item)
		query = request.GET.get("q")
		if query:
			item = item.filter(
				Q(name__icontains=query)
			).distinct()
			count = len(item)
		paginator = Paginator(item, 6) # Show 25 contacts per page
		page_request_var = "page"
		page = request.GET.get(page_request_var)
		try:
			item = paginator.page(page)
		except PageNotAnInteger:
			# If page is not an integer, deliver first page.
			item = paginator.page(1)
		except EmptyPage:
			# If page is out of range (e.g. 9999), deliver last page of results.
			item = paginator.page(paginator.num_pages)
		context = {
		"item": item,
		"count": count,
		"page_request_var": page_request_var,
		}
		return render(request, 'index.html', context)
	else:
		return redirect('home')

# in html templates
<form method='GET' action=''>
	<input type='text' name='q' placeholder='Search' value='{{ request.GET.q }}' autofocus />
	<input type='submit' value='Search' />
	{% if count %}{{count}} results.{% else %}No results.{% endif %}
</form>

<div class="pagination" align="right">
	<span class="step-links">
	{% if item.has_previous %}
		<a href="?{{ page_request_var }}={{ item.previous_page_number }}{% if request.GET.q %}&q={{ request.GET.q }}{% endif %}">previous</a>
	{% endif %}

	<span class="current">Page {{ item.number }} of {{ item.paginator.num_pages }}</span>
	{% if item.has_next %}
		<a href="?{{ page_request_var }}={{ item.next_page_number }}{% if request.GET.q %}&q={{ request.GET.q }}{% endif %}">next</a>
	{% endif %}
	</span>
</div>
